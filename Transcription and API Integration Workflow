{
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -220,
        0
      ],
      "id": "363563b4-58df-4c56-8ca1-9242ecc2f38f",
      "name": "When chat message received",
      "webhookId": "c5b3562f-2e58-42fa-896f-0368fc930b3d"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Output only the number, without any additional explanation or characters.\n\n{{ $json.chatInput }}\n\n\nexample input:\n\"find me the transcrition for 1177058977130639\"\n\noutput:\n1177058977130639"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        80,
        0
      ],
      "id": "95381741-d4bc-42e4-b4c6-d6c73843d71a",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "tWQuG2jQDyuPN4cP",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://www.facebook.com/ads/library/?active_status=active&ad_type=all&country=ALL&is_targeted_country=false&media_type=all&q={{ $json.adId }}&search_type=keyword_unordered",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        0
      ],
      "id": "99dc041f-9d15-4318-a400-865db68db2a2",
      "name": "HTTP Request",
      "alwaysOutputData": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nimport json\n\ndef find_and_unescape_video_url(html_content):\n    \"\"\"\n    Finds the value associated with the \"video_sd_url\" key in a\n    JSON-like string within the HTML content and unescapes it.\n\n    Args:\n        html_content: A string containing the HTML source code.\n\n    Returns:\n        A string containing the unescaped video URL if found, otherwise None.\n    \"\"\"\n    match = re.search(r'\"video_sd_url\":\"(.*?)\"', html_content)\n    if match:\n        escaped_url = match.group(1)\n        # Attempt to unescape the string as if it were part of a JSON structure\n        try:\n            # Wrap the string in double quotes to make it a valid JSON string value\n            unescaped_url = json.loads(f'\"{escaped_url}\"')\n            return unescaped_url\n        except json.JSONDecodeError:\n            # If direct JSON decoding fails, try a simple replace for backslashes\n            return escaped_url.replace('\\\\', '')\n    return None\n\nhtml_content = items[0].json[\"data\"] # Assuming HTML is in the \"data\" property\nvideo_url = find_and_unescape_video_url(html_content)\n\noutput = []\nif video_url:\n    output.append({ \"json\": { \"video_url\": video_url } })\nelse:\n    output.append({ \"json\": {} })\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        0
      ],
      "id": "03455aca-fdc0-4b77-8c1f-47ebeae2080e",
      "name": "Code4"
    },
    {
      "parameters": {
        "url": "={{ $json.video_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1240,
        0
      ],
      "id": "23ea0a09-ca1d-4f9f-a8c1-f816387d5ab9",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/transcriptions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "model",
              "value": "whisper-1"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1480,
        0
      ],
      "id": "331652ae-b068-4804-8790-e6a4f99ce02c",
      "name": "Transcribe with Whisper"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7570cb02-2a85-4d98-93aa-570cc70271bd",
              "name": "adId",
              "value": "={{ $json.message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        480,
        0
      ],
      "id": "d7e60254-1829-4188-bb6b-10e2fc0cb264",
      "name": "Edit Fields"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Transcribe with Whisper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c9022fab5e98f888acca230e4dbcc338e09adfb5d320403903c6b819ba734e1d"
  }
}
